/*
 * Copyright (c) 2010, Oracle.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the distribution.
 *  * Neither the name of Oracle nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

/* Anagram Game Application */

package Client;

import commonStuff.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * 
 */
public class StegaViewer extends JDialog {
   private Chat_clientGUI parent;
   //private ImageIcon newIcon;
   private BufferedImage originalImg;
   private BufferedImage steganoImg;   
   private Steganography steganografia;
   private File f_img;
   private int maxBytes;
   
    public StegaViewer(Chat_clientGUI parent,File f) throws IOException {
        super(parent,true);
        this.parent=parent;
        initComponents();
        pack();
        Rectangle parentBounds = parent.getBounds();
        Dimension size = getSize();
        // Center in the parent
        int x = Math.max(0, parentBounds.x + (parentBounds.width - size.width) / 2);
        int y = Math.max(0, parentBounds.y + (parentBounds.height - size.height) / 2);
        setLocation(new Point(x, y));
        
        //newIcon = new ImageIcon(f.getAbsolutePath());
        f_img = f;
        originalImg = ImageIO.read(f_img);
        jLabel_image.setIcon(new ImageIcon(originalImg));
        //jLabel_imageStegano.setSize(jLabel_image.getWidth(),jLabel_image.getHeight());
        //Label_sliderValue.setText(""+jSlider_bit.getValue());
        maxBytes = (originalImg.getWidth()*originalImg.getHeight()*3*1)/8;
        jLabel_caratteriInseriti.setText("0 /"+maxBytes+" byte");
        steganografia=new Steganography();
        steganoImg=null;
        //updateMaxByte();
        setTitle(f.getName());
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_messaggio = new javax.swing.JTextArea();
        jLabel_caratteriInseriti = new javax.swing.JLabel();
        jButton1_conferma = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel_image = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextArea_messaggio.setColumns(20);
        jTextArea_messaggio.setRows(5);
        jTextArea_messaggio.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextArea_messaggioCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea_messaggio);

        jButton1_conferma.setText("Conferma");
        jButton1_conferma.setToolTipText("Invia immagine steganografata");
        jButton1_conferma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_confermaActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jLabel_image);

        jLabel1.setText("Messaggio da nascondere (opzionale):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_caratteriInseriti, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1_conferma, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_caratteriInseriti, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1_conferma, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1_confermaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_confermaActionPerformed
        System.out.println("Steganografia in corso.");
        String mes = jTextArea_messaggio.getText();
        steganoImg = steganografia.encode(f_img, mes);
        Serial_BufImage test = new Serial_BufImage(steganografia.convertToByteArray(steganoImg),parent.username);
        parent.comunication.sendData(test);
        dispose();        
    }//GEN-LAST:event_jButton1_confermaActionPerformed

    private void jTextArea_messaggioCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextArea_messaggioCaretUpdate
      jLabel_caratteriInseriti.setText(jTextArea_messaggio.getText().getBytes().length+" /"+maxBytes+" byte");
    }//GEN-LAST:event_jTextArea_messaggioCaretUpdate

    /*private String getBinary(String s){
       try {
           byte[] bytes = s.getBytes("UTF-8");
           StringBuilder binary = new StringBuilder();
           for (byte b : bytes)
           {
               int val = b;
               for (int i = 0; i < 8; i++)
               {
                   binary.append((val & 128) == 0 ? 0 : 1);
                   val <<= 1;
               }
               //binary.append(' ');
           }
           return binary.toString();
       } catch (UnsupportedEncodingException ex) {
           Logger.getLogger(StegaViewer.class.getName()).log(Level.SEVERE, null, ex);
           return "";
       }
    }*/
    
    
    /*private BufferedImage user_space(BufferedImage image){
      BufferedImage new_img  = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
      Graphics2D graphics   = new_img.createGraphics();
      graphics.drawRenderedImage(image, null);
      graphics.dispose(); 
      return new_img;
    }*/
    
    /*private StringBuilder getBitImage(BufferedImage img){
      StringBuilder res=new StringBuilder("");
      for(int i=0;i<img.getWidth();i++){
        for(int j=0;j<img.getHeight();j++){
          //Ottengo stringa binaria di ogni compontonente del pixel corrente
          Color px = new Color(img.getRGB(i, j));
          StringBuilder[] binaryRGB = {
              new StringBuilder(Integer.toBinaryString(px.getRed())),
              new StringBuilder(Integer.toBinaryString(px.getGreen())),
              new StringBuilder(Integer.toBinaryString(px.getBlue()))
          };
          res.append(binaryRGB[0].toString()+binaryRGB[1].toString()+binaryRGB[2].toString());
        }
      }
      return res;
    }*/
    
    /*private boolean insertText(StringBuilder imgBit,String mesBit,int offset,int nBit){
      int bitMesInsTot=0;
      System.out.println("imgBit.length(): "+imgBit.length());
      for(int i = 0; i < mesBit.length(); i++){//Scorro i bit del messaggio da inserire
        char newBit = mesBit.charAt(i);//Preleo bit da inserire nell'immagine
        for (int j = offset; j < imgBit.length(); j+=8) {//Scorro i byte dell'immagine, partendo dal bit 'offset'
          //String byTe = imgBit.substring(j, j+8);//Ottengo byte corrente dell'immagine
          //Scorro il byte (R,G o B che sia) al contrario, partendo dai bit meno significativi.
          //Inserisco nBit di messaggio per ogni byte di immagine.
          for(int b=j+7,insertBit=0;b>=j && b<imgBit.length() && insertBit!=nBit;b--,insertBit++){
            imgBit.setCharAt(b, newBit);
            bitMesInsTot++;
          }    
        }
      }
      return bitMesInsTot==mesBit.length();
    
      //Scorro i pixel dell'immagine per inserire il messaggio partendo dai bit meno significativi
      for(int i=a;i<img.getWidth() && indexMesBinary<mesBinary.length() && nPixelUsed<nPixel;i++){
        for(int j=b;j<img.getHeight() && indexMesBinary<mesBinary.length() && nPixelUsed<nPixel;j++,nPixelUsed++){
          //Ottengo stringa binaria di ogni compontonente del pixel corrente
          Color px = new Color(img.getRGB(i, j));
          StringBuilder[] binaryRGB = {
              new StringBuilder(Integer.toBinaryString(px.getRed())),
              new StringBuilder(Integer.toBinaryString(px.getGreen())),
              new StringBuilder(Integer.toBinaryString(px.getBlue()))
          };
          //Adesso scorro le componenti rgb ottenute e sfrutto n bit per ciscun canale
          //per inserire il messaggio, dove n è il numero di bit scelto
          //dall'utente. Parto dal bit meno significativo per ogni canale (quello più a dx)
          
          //Scorro le componenti del pixel se il messaggio non è stato ancora inserito del tutto.
          for(int x=0;x<binaryRGB.length && indexMesBinary<mesBinary.length();x++){
            int bitUsed=0;//Indicatore di quanti bit sono stati utilizzati per codificare il messsaggio nel canale corrente (R,G o B)
            for(int y=binaryRGB[x].length()-1; y>=0 && indexMesBinary<mesBinary.length() && bitUsed!=nBit;y--,indexMesBinary++,bitUsed++){
              binaryRGB[x].setCharAt(y,mesBinary.charAt(indexMesBinary));
            }
          }
          //Aggiorno il pixel con il suo nuovo valore rgb, contenete una parte del messaggio.
            String newBinaryPixel = binaryRGB[0].toString()+binaryRGB[1].toString()+binaryRGB[2].toString();
            //System.out.println("oldPixel:"+oldBinaryPixel);
            //System.out.println("newPixel:"+newBinaryPixel);
            //System.out.println("Sono uguali? "+oldBinaryPixel.equals(newBinaryPixel));
            int intPixel = Integer.parseInt(newBinaryPixel, 2);
            img.setRGB(i,j,new Color(255,0,0).getRGB());
        }
      }
      //Mostro all'utente l'immagine steganografata.
      jLabel_imageStegano.setIcon(new ImageIcon(img));System.out.println("Steganografato.");
      if(indexMesBinary==mesBinary.length()-1)return true;
      return false;
    }*/
    /*
    private byte[] getBytes(String binaryString){
      byte[] b = new byte[binaryString.length()/8];
      System.out.println("binaryString.length(): "+binaryString.length());
      System.out.println("binaryString.length()/8: "+binaryString.length()/8);        
      for(int i=0,j=0;i<b.length;i++,j+=8){
          System.out.println("i: "+i);  
        b[i] = Byte.parseByte(binaryString.substring(j,j+8),2);
      }
      return b;
      BigInteger bigInt = new BigInteger(binaryString, 2);
      byte[] binaryData = bigInt.toByteArray(); 
      return binaryData;
    }
    */
    /*
    Codifica mes nell'immagine (imgOriginale) utilizzando nBit per canale di ogni pixel dell'immagine.
    */
    /*private void codifica(String mes,int nBit) {
      //Predno l'immagine originale e la inserisco in un buffered reader èer poterla modificare
      //N.B: l'immagine originale non deve variare.      
      BufferedImage img = user_space(originalImg);
      String mesBit = getBinary(mes);//Ottengo il messaggio in forma stringa Binaria
      String dimMesBit = Integer.toBinaryString(mesBit.length());//Ottengo il numero di bit necessari a rappresentare il messaggio      
      StringBuilder imgBit = getBitImage(img);//Ottengo l'immagine sottoforma di bit
        System.out.println("Messaggio: "+mes);      
        System.out.println("Messaggio in binario: "+mesBit);
      
      //Devo inserire due cose nell'immagine: 1°dimMes, 2°mesBit
      //I primi 256 bit sono dedicati alla memorizzazione di dimMes. (con 1 bit disp x componente, il messagguio può essere lungo: 2^32)
      insertText(imgBit,dimMesBit,0,nBit);
      insertText(imgBit,mesBit,256,nBit);
      //imgBit contiene il messaggio adesso.
       try {
           byte[] b = getBytes(imgBit.toString());
           System.out.println("b.length: "+b.length);
           BufferedImage imgStegano = ImageIO.read(new ByteArrayInputStream(b));
           ImageIcon newIcon = new ImageIcon(imgStegano);
           jLabel_imageStegano.setIcon(newIcon);
           System.out.println("Immagine steganografata.");
           //insertText(img, mesBit, nBit, 0, 0, 10);
           //insertText(img, mesBit, nBit, 0, 11, );
           //**TEST
           // decodifica(imgBit);
       } catch (IOException ex) {
           Logger.getLogger(StegaViewer.class.getName()).log(Level.SEVERE, null, ex);
       }
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_conferma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_caratteriInseriti;
    private javax.swing.JLabel jLabel_image;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea_messaggio;
    // End of variables declaration//GEN-END:variables

}
